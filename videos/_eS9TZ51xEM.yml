# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - performance
title: '"Play it again, Sam": Bookmarking, Slicing, and Replaying Unbounded Data Streams for Analytics Appli'
recordingDate: 1562699842
description: "Flink Forward Berlin, September 2018 #flinkforward\n\nPravega is a novel storage system that exposes data stream as a first-class abstraction as opposed to objects and files. With Pravega, a stream is a consistently ordered, durable, available and elastic series of data events. Pravega is designed to ingest, store and serve potentially unbounded data streams with high performance while adapting to workload fluctuations thanks to auto-scaling. Developers can extract value and insights out of stream data by connecting Pravega with a stream processor: Apache Flink is a strong candidate due to its advanced stream processing features. We provide a ready-to-use connector that enables Flink jobs to process data stored in Pravega in stream (ordered) or batch (unordered) fashion. For instance, reading in batch a slice of old data events, rewinding/fast-forwarding parts of a stream, or bookmarking a specific point of a stream that is being read are common needs for developers that become simple tasks with Pravega. In this talk, we present the main abstraction to support such operations over streams: stream cut, a compact data structure that represents an event boundary across a collection of streams. Developers can easily instruct applications to work with stream cuts to go back and forth on a data stream; they are cheap to create and allow efficient seeks in a stream. In Pravega, developers may use pairs of stream cuts to replay arbitrarily old stream slices in a more natural way than batch loading data from traditional file- and object-based storage systems. Stream cuts can be created to bookmark a stream based on time (e.g., data created in a single day in a company), event references (e.g., series of events for which an anomaly has been detected), or any other aspect. Moreover, stream cuts complement Flink features such as savepoints; developers that snapshot the state of an application can also capture the precise range of events used as input to reach such a state. In this talk, we illustrate how this simple yet powerful abstraction can be exploited with examples, including Flink samples.\n\n\nhttps://data-artisans.com/"
